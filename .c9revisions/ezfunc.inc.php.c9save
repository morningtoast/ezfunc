{"ts":1345041466015,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\r\n\r\n\r\n/*\r\n    EZFunc Framework\r\n\tSimple function framework for PHP4+\r\n\t\r\n\tThis framework provides handy wrappers for native PHP functions.\r\n\t\r\n\t2004-2012, Brian Vaughn\r\n\thttps://github.com/morningtoast\r\n*/\r\n\r\n\r\n\r\n\r\n/******************************************\r\n * Debugging functions\r\n ******************************************/\r\n \tfunction debug($item) {\r\n \t\tif (DEBUG == TRUE) {\r\n \t\t\tif (is_array($item)) {\r\n \t\t\t\tarray_debug($item);\r\n \t\t\t} else {\r\n \t\t\t\tif (!$item) {\r\n \t\t\t\t\t$item = \"NO VALUE\";\r\n \t\t\t\t}\r\n \t\t\t\t\r\n \t\t\t\techo \"<pre>$item</pre>\";\r\n \t\t\t}\r\n \t\t}\r\n \t\treturn;\t\r\n \t}\r\n \t\r\n \t\r\n\r\n/******************************************\r\n * Array functions\r\n ******************************************/\r\n\r\n\t/**\r\n\t* Displays array\r\n\t*\r\n\t* This is a debugging function that will show the structure of the passed array.\r\n\t* @param array $array Array to display.\r\n\t* @return null\r\n\t*/\r\n\tfunction array_debug() {\r\n\t\t$args  = func_get_args();\r\n\t\t$count = func_num_args();\r\n\r\n\t\tif ($count > 1) {\r\n\t\t\tif (end($args) == 1) {\r\n\t\t\t\t$exit = TRUE;\r\n\t\t\t\tarray_pop($args);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tforeach ($args as $array) {\r\n\t\t\tif (is_array($array)) {\r\n\t\t\t\techo \"<pre>--- START\\n\";\r\n\t\t\t\tprint_r($array);\r\n\t\t\t\techo \"\\n--- END</pre>\";\r\n\t\t\t} else {\r\n\t\t\t\techo \"<p><code>-- Invalid array --</code></p>\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ($exit) { exit(); }\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* Sort a multidimensional array\r\n\t*\r\n\t* Sorts an associative array by a specified field/column and retains keys and structure.\r\n\t* Taken from: http://fr3.php.net/manual/en/function.array-multisort.php\r\n\t* @param string $array Array to sort\r\n\t* @param string $list All secondary parameters are considered fields to sort by, given priority by order\r\n\t* @return array Sorted array\r\n\t*/\r\n\tfunction array_csort() {\r\n\t     $args   = func_get_args();\r\n\t     $marray = array();\r\n\r\n\t     if (is_array($args[0]) and (count($args[0]) > 0)) {\r\n\r\n\t\t     $marray    = array_shift($args);\r\n\t\t     $msortline = \"return(array_multisort(\";\r\n\t\t     foreach ($args as $arg) {\r\n\t\t         $i++;\r\n\t\t         if (is_string($arg)) {\r\n\t\t             foreach ($marray as $row) {\r\n\t\t                 $a = strtoupper($row[$arg]);\r\n\t\t                 $sortarr[$i][] = $a;\r\n\t\t             }\r\n\t\t         } else {\r\n\t\t             $sortarr[$i] = $arg;\r\n\t\t         }\r\n\t\t         $msortline .= \"\\$sortarr[\".$i.\"],\";\r\n\t\t     }\r\n\t\t     $msortline .= \"\\$marray));\";\r\n\r\n\t\t     eval($msortline);\r\n\t\t}\r\n\r\n\t    return($marray);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* Restore a saved array\r\n\t*\r\n\t* Reads the saved array flat file and restores it as an array\r\n\t* @param string $filepath Absolute path to save location\r\n\t* @return array Saved array as variable\r\n\t*/\r\n\tfunction array_load($filepath) {\r\n\t\tif (file_exists($filepath)) {\r\n\t\t\t$file = fopen($filepath, \"r\");\r\n\t\t\t$arraysource = fread($file, filesize($filepath));\r\n\t\t\tfclose($file);\r\n\r\n\t\t\t$thisarray = unserialize($arraysource);\r\n\t\t}\r\n\r\n\t\tif (!is_array($thisarray)) {\r\n\t\t\t$thisarray = array();\r\n\t\t}\r\n\r\n\t\treturn($thisarray);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* Save an array to a text file\r\n\t*\r\n\t* Flattens the array and makes it safe for saving as a text file.\r\n\t* @param string $filepath Absolute path to save location\r\n\t* @param array $array Array to be saved\r\n\t* @return array Passed array\r\n\t*/\r\n\tfunction array_save($filepath,$array) {\r\n\t\tif (!is_array($array)) {\r\n\t\t\t$array = array();\r\n\t\t}\r\n\r\n\t\t$file = fopen($filepath,\"w\");\r\n\t\tfputs($file, serialize($array));\r\n\t\tfclose($file);\r\n\r\n\t\treturn($array);\r\n\t}\r\n\r\n\r\n\t// Extract a single field into a standard array ** Recusrsion function **\r\n\tfunction array_extract() {\r\n\t\t$argcount = func_num_args();\r\n\t\t$args     = func_get_args();\r\n\t\t$list     = array();\r\n\r\n\t\tif (end($args) == 1) {\r\n\t\t\t$flat = TRUE;\r\n\t\t\tarray_pop($args);\r\n\t\t\t$argcount = count($args);\r\n\t\t}\r\n\r\n\t\tif ($argcount > 1) {\r\n\t\t\t$field = $args[0];\r\n\t\t\tarray_shift($args);\r\n\r\n\t\t\tfor ($a=0; $a < ($argcount-1); $a++) {\r\n\t\t\t\t$item = $args[$a];\r\n\r\n\t\t\t\tif (is_array($item)) {\r\n\t\t\t\t\tforeach ($item as $key => $elem) {\r\n\t\t\t\t\t\tif (is_array($elem)) {\r\n\t\t\t\t\t\t\t$grab = array_extract($field, $elem); // Recursion\r\n\t\t\t\t\t\t\t$list = array_merge($list, $grab);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif ($key == $field) {\r\n\t\t\t\t\t\t\t\t$list[] = $elem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$list = array_unique($list);\r\n\r\n\t\tif ($flat) {\r\n\t\t\t$list = implode(\",\",$list);\r\n\t\t}\r\n\r\n\t\treturn($list);\r\n\t}\r\n\r\n\t// Apply a function to each element in an array\r\n\t// Works on multiarray - Different than array_walk()\r\n\t// ** Calls array $elem by reference **\r\n\tfunction array_each(&$elem, $func) {\r\n\t\tif (!is_array($elem)) {\r\n\t\t\t$elem = $func($elem);\r\n\t\t} else {\r\n\t\t\tforeach ($elem as $key => $value) {\r\n\t\t\t\t$elem[$key] = array_each($value, $func);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn($elem);\r\n\t}\r\n\r\n/******************************************\r\n * MySQL\r\n ******************************************/\r\n\r\n\t/**\r\n\t* Inserts a new record\r\n\t*\r\n\t* Takes specified array and inserts data as a new record.\r\n\t* Interprets array key as field name and value as value.\r\n\t* @param string $table Table name\r\n\t* @param array $data Array of data to insert\r\n\t* @param int $debug Set as 1 to display query without executing\r\n\t* @return int Record insert ID\r\n\t*/\r\n\tfunction mysql_insert($data, $table, $debug=FALSE) {\r\n\t\t$sql = \"insert into $table \";\r\n\r\n\t\tif (is_array($data)) {\r\n\t\t\tforeach ($data as $field => $value) {\r\n\t\t\t\t$fieldlist[] = $field;\r\n\r\n\t\t\t\tif (!is_numeric($value)) {\r\n\t\t\t\t\t$value = \"'\".addslashes($value).\"'\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$valuelist[] = $value;\r\n\t\t\t}\r\n\r\n\t\t\t$fieldlist = implode(\",\",$fieldlist);\r\n\t\t\t$valuelist = implode(\",\",$valuelist);\r\n\r\n\t\t\t$sql = $sql. \"($fieldlist) values ($valuelist)\";\r\n\t\t} else {\r\n\t\t\t$debug = TRUE;\r\n\t\t}\r\n\r\n\t\tif ($debug == FALSE) {\r\n\t\t\tmysql_query($sql);\r\n\t\t\t$insertid = mysql_insert_id();\r\n\t\t} else {\r\n\t\t\techo \"<pre>$sql</pre>\";\r\n\t\t}\r\n\r\n\r\n\t\treturn($insertid);\r\n\t}\r\n\r\n\t/**\r\n\t* Updates an existing record\r\n\t*\r\n\t* Takes specified array and updates an existing record.\r\n\t* Interprets array key as field name and value as value.\r\n\t* @param string $table Table name\r\n\t* @param array $data Array of data to insert\r\n\t* @param string $condition Required condition to update query.\r\n\t* @param int $debug Set as 1 to display query without executing\r\n\t* @return int TRUE on success, FALSE on failure\r\n\t*/\r\n\tfunction mysql_update($data, $table, $condition,$debug=\"0\") {\r\n\t\t$sql = \"update $table set\";\r\n\r\n\t\tif (is_array($data)) {\r\n\t\t\tforeach ($data as $field => $value) {\r\n\t\t\t\tif (!is_numeric($value)) {\r\n\t\t\t\t\t$value = \"'\".addslashes($value).\"'\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$query[] = \"$field=\".$value;\r\n\t\t\t}\r\n\r\n\t\t\t$query = implode(\",\",$query);\r\n\r\n\t\t\t$sql = trim($sql).\" \".trim($query).\" \".trim($condition);\r\n\t\t} else {\r\n\t\t\t$debug     = 1;\r\n\t\t\t$condition = 1;\r\n\t\t}\r\n\r\n\t\tif ($debug <= 0 and $condition) {\r\n\t\t\t$success = mysql_query($sql);\r\n\t\t} else {\r\n\t\t\techo \"<pre>$sql</pre>\";\r\n\t\t}\r\n\r\n\t\treturn($success);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* Returns an array list\r\n\t*\r\n\t* Takes given query and returns a standard array of all matching records.\r\n\t* The second parameter is optional and can be the name of a field you want to be the key of array cells. Should be unique!\r\n\t* If the specified field is not found, the list is returned as a regular array.\r\n\t* @param string $query MySQL query\r\n\t* @param string $key Name of field to use as array key\r\n\t* @return array Array of matching records\r\n\t*/\r\n\tfunction mysql_query_list($query,$key=FALSE,$grouped=false) {\r\n\t\t$list = array();\r\n\t\t$result=mysql_query($query);\r\n\t\tfor ($a=0; $myrow=mysql_fetch_assoc($result); $a++) {\r\n\t\t\t$fields = count($myrow);\r\n\r\n\t\t\tif ($key and array_key_exists($key,$myrow)) {\r\n\t\t\t\t$m_key = $myrow[$key];\r\n\t\t\t\tif ($fields == 2) {\r\n\t\t\t\t\tunset($myrow[$key]);\r\n\r\n\t\t\t\t\t$list[$m_key] = current($myrow);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (!$grouped) {\r\n\t\t\t\t\t\t$list[$m_key][] = $myrow;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$list[$m_key] = $myrow;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif ($fields <= 1) {\r\n\t\t\t\t\t$list[] = current($myrow);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$list[] = $myrow;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn($list);\r\n\t}\r\n\r\n\t/**\r\n\t* Escapes all values for MySQL use\r\n\t*\r\n\t* Takes any size array and makes each value MySQL-safe by escaping\r\n\t* all special characters as needed.\r\n\t*\r\n\t* For non-arrays, use the regular mysql_real_escape_string() function.\r\n\t* @param string $array Any size array with values that will be put in the database\r\n\t* @return array Same size array with escaped values\r\n\t*/\r\n\tfunction mysql_safe_array($array) {\r\n\t\t$array = array_each($array, mysql_real_escape_string);\r\n\r\n        return($array);\r\n\t}\r\n\r\n/******************************************\r\n * File system\r\n ******************************************/\r\n\r\n\t/**\r\n\t* Appends array to CSV file\r\n\t*\r\n\t* Takes specified array and appends it to a CSV file. Each array value is seen as one column value.\r\n\t* All values are escaped with double quotes.\r\n\t* Checks for valid directory location before writing.\r\n\t* @param array $data Array of data to write\r\n\t* @param string $filepath Path to write CSV file\r\n\t* @param int $maxsize Maximum file size. If this size is exceeded, the file will be deleted.\r\n\t* @return int TRUE on success, FALSE on failure\r\n\t*/\r\n\tfunction file_csvlog($data,$filepath,$maxsize=\"0\") {\r\n\t\t$logdir = dirname($filepath);\r\n\r\n\t\tif (is_dir($logdir)) {\r\n\t\t\tif (file_exists($filepath)) {\r\n\t\t\t\tif ((filesize($filepath) > $maxsize) and ($maxsize > 0)) {\r\n\t\t\t\t\tunlink($filepath);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tforeach ($data as $item) {\r\n\t\t\t\t$line[] = \"\\\"\".$item.\"\\\"\";\r\n\t\t\t}\r\n\r\n\t\t\t$line    = implode(\",\",$line).\"\\r\\n\";\r\n\t\t\t$success = error_log($line,3,$filepath);\r\n\t\t}\r\n\r\n\t\treturn($success);\r\n\t}\r\n\r\n\t/**\r\n\t* Reads a CSV file into an array\r\n\t*\r\n\t* Reads a standard CSV file and returns an array.\r\n\t* Array structure contains a node for each line, then an array for each column value.\r\n\t* Accounting for a header row uses header labels as keys in returned array. Header row is not returned in array.\r\n\t* @param string $filepath Path to CSV file\r\n\t* @param string $headerRow Set to 1 to account for and use header row.\r\n\t* @param int $maxsize Maximum file size. If this size is exceeded, the file will be deleted.\r\n\t* @return array Array of CSV file\r\n\t*/\r\n\tfunction file_readcsv($filepath,$headerRow=\"0\") {\r\n\t\t$array  = array();\r\n\r\n\t\tif (file_exists($filepath)) {\r\n\t\t\t$row    = 0;\r\n\t\t\t$handle = fopen($filepath, \"r\");\r\n\t\t\twhile (($data = fgetcsv($handle, 1024, \",\")) !== FALSE) {\r\n\t\t\t   $size = count($data);\r\n\r\n\t\t\t\tif ($row <= 0 and $headerRow > 0) {\r\n\t\t\t\t\t$header = $data;\r\n\t\t\t   \t}\r\n\r\n\t\t\t\tif (is_array($header)) {\r\n\t\t\t\t\tfor ($a=0; $a < $size; $a++) {\r\n\t\t\t\t\t\t$array[$row][$header[$a]] = $data[$a];\r\n\t\t\t    \t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor ($a=0; $a < $size; $a++) {\r\n\t\t\t\t\t\t$array[$row][] = $data[$a];\r\n\t\t\t    \t}\r\n\t\t\t   }\r\n\r\n\t\t\t   $row++;\r\n\t\t\t}\r\n\t\t\tfclose($handle);\r\n\r\n\t\t\tif (is_array($header)) {\r\n\t\t\t\tarray_shift($array);\r\n\t\t\t}\r\n\t\t}\r\n\r\n \t\treturn($array);\r\n\t}\r\n\r\n\t// Alias call to file_readcsv()\r\n\tfunction file_parsecsv($filepath,$headerRow=\"0\") {\r\n\t\t$array = file_readcsv($filepath,$headerRow);\r\n\r\n\t\treturn($array);\r\n\t}\r\n\r\n\t/**\r\n\t* Parses a file by line\r\n\t*\r\n\t* Reads a file and returns an array. One node per line.\r\n\t* This is an alternate for the file() function. Checks for existing file before read.\r\n\t* @param string $filepath Path to file\r\n\t* @return array Array of file line-by-line\r\n\t*/\r\n\tfunction file_lineparse($filepath) {\r\n\t\t$array = array();\r\n\r\n\t\tif (file_exists($filepath)) {\r\n\t\t\t$source = file($filepath);\r\n\r\n\t\t\tforeach ($source as $line) {\r\n\t\t\t\t$array[] = trim($line);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn($array);\r\n\t}\r\n\r\n\t/**\r\n\t* Reads a file into a string\r\n\t*\r\n\t* Reads a file or URL into a string.\r\n\t* This is an alternate for the file_get_contents() function. Checks for existing file before read.\r\n\t* @param string $filepath Path to file\r\n\t* @return string Contents of file\r\n\t*/\r\n\tfunction file_read($filepath) {\r\n\t\tif (file_exists($filepath)) {\r\n\t\t\t$string = file_get_contents($filepath);\r\n\t\t}\r\n\r\n\t\treturn($string);\r\n\t}\r\n\r\n\t/**\r\n\t* Writes a string to a file\r\n\t*\r\n\t* Writes a string to a new file. Will overwrite file if it already exists.\r\n\t* Checks for a valid directory file writing file.\r\n\t* @param string $filepath Path to file\r\n\t* @return string Contents of file\r\n\t*/\r\n\tfunction file_write($string,$filepath) {\r\n\t\t$logdir = dirname($filepath);\r\n\r\n\t\tif (is_dir($logdir)) {\r\n\t\t\t$file=fopen($filepath,\"w\");\r\n\t\t\tfputs($file, $string);\r\n\t\t\tfclose($file);\r\n\t\t}\r\n\r\n\t\treturn($file);\r\n\t}\r\n\r\n\t// Prepend XML header to string and write to a file\r\n\tfunction file_writexml($string, $filepath) {\r\n\t\t$string = \"<?xml version=\\\"1.0\\\" ?>\\r\\n\".$string;\r\n\t\t$file = file_write($string, $filepath);\r\n\r\n\t\treturn($file);\r\n\t}\r\n\t\r\n\t// Append to a file, with size limit\r\n\tfunction file_append($data,$filepath,$maxsize=\"0\") {\r\n\r\n\t\tif (file_exists($filepath)) {\r\n\t\t\tif ((filesize($filepath) > $maxsize) and ($maxsize > 0)) {\r\n\t\t\t\tunlink($filepath);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$success = error_log($data.\"\\n\",3,$filepath);\r\n\r\n\t\treturn($success);\r\n\t}\t\r\n\r\n/******************************************\r\n * Date/Time\r\n ******************************************/\r\n\r\n\t/**\r\n\t* Formats date as standard MySQL-friend\r\n\t*/\r\n\tfunction date_formatX($date, $format=\"Y-m-d\") {\r\n\t\t$date = date($format, strtotime($date));\r\n\r\n\t\treturn($date);\r\n\t}\t\r\n\t\r\n\tfunction date_standard($date, $format=\"m/d/Y\") {\r\n\t\t$date = date($format, strtotime($date));\r\n\r\n\t\treturn($date);\r\n\t}\r\n\r\n\t/**\r\n\t* Calculates a new date\r\n\t*\r\n\t* Takes a standard formatted date (YYYY-MM-DD) and adds a value to calculate a new date.\r\n\t* @param date $date Standard formatted date\r\n\t* @param int $int Number of days to add to the date, default is zero\r\n\t* @return date New date in standard format\r\n\t*/\r\n\tfunction date_calc($date, $int=0) {\r\n\t\t$date       = date(\"Y-m-d\",strtotime($date));\r\n\t\t$this_month = date(\"m\",strtotime($date));\r\n\t\t$this_day   = date(\"d\",strtotime($date));\r\n\t\t$this_year  = date(\"Y\",strtotime($date));\r\n\r\n\t\t$date = date(\"Y-m-d\", mktime(0,0,0,$this_month,($this_day+$int),$this_year));\r\n\r\n\t\treturn($date);\r\n\t}\r\n\r\n\t/**\r\n\t* Gets dates of current week\r\n\t*\r\n\t* Takes a standard formatted date (YYYY-MM-DD) and returns a standard array containing the 7 days that make up that week.\r\n\t* You can optionally select what day is used as the start of the week.\r\n\t* NOTE: Requires date_calc() function\r\n\t* @param date $date Standard formatted date\r\n\t* @param string $weekstart Name of the day that should be used as start of the week. Default is \"Sunday\"\r\n\t* @return array Standard array containing 7 dates\r\n\t*/\r\n\tfunction date_getweek($date, $weekstart=\"Sunday\", $days=7) {\r\n\t\t$weekstart  = ucfirst($weekstart);\r\n\t\t$currentday = date(\"l\",strtotime($date));\r\n\t\t$daterange  = array();\r\n\t\t$mathdate   = $date;\r\n\r\n\t\tif ($currentday != $weekstart) {\r\n\t\t\twhile ($dayname != $weekstart) {\r\n\t\t\t\t$mathdate    = date_calc($mathdate,-1);\r\n\t\t\t\t$dayname     = date(\"l\",strtotime($mathdate));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor ($a=0; $a < $days; $a++) {\r\n\t\t\t$daterange[] = date_calc($mathdate,$a);\r\n\t\t}\r\n\r\n\t\treturn($daterange);\r\n\t}\r\n\t\r\n\t\r\n\t/**\r\n\t* Gets different of two dates\r\n\t*\r\n\t* Takes two standard formatted date (YYYY-MM-DD) and returns the differen between the two as specified\r\n\t* by the second parameter\r\n\t* @param date $then Standard formatted date\r\n\t* @param date $now Standard formatted date\t\r\n\t* @param string $count Count to return. y|m|d [d]\r\n\t*/\t\r\n\tfunction date_change($then, $now, $count=\"d\") {\r\n\t\t$diff = abs(strtotime($then) - strtotime($now));\r\n\r\n\t\t$years  = floor($diff / (365*60*60*24));\r\n\t\t$months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));\r\n\t\t$days   = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));\r\n\t\r\n\t\tswitch ($count) {\r\n\t\t\tcase \"y\": return($years); break;\r\n\t\t\tcase \"m\": return($months); break;\r\n\t\t\tdefault:\r\n\t\t\tcase \"d\":\r\n\t\t\t\treturn($days); \r\n\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\r\n/******************************************\r\n * URLs\r\n ******************************************/\r\n\r\n\t/**\r\n\t* Generates new URL query\r\n\t*\r\n\t* Combines the current URL with passed variables to generate a new URL with new GET arguements.\r\n\t* @param array $replace Array with GET var name as key and value as value\r\n\t* @param array $exclude Array with GET var name as value. Matching GET vars will not be included in new URL\r\n\t* @return string Complete URL GET arguements from the ? on (including ?) - Ready for file append\r\n\t*/\r\n\tfunction url_build_query($replace=array(), $exclude=array(), $noget=0) {\r\n\t\t$list     = array();\r\n\t\t$query    = array();\r\n\r\n\t\t// Build array of values from GET\r\n\t\tif ($noget <= 0) {\r\n\t\t\tforeach ($_GET as $var => $value) {\r\n\t\t\t\t$list[$var] = $value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Build array of values from passed\r\n\t\tforeach ($replace as $var => $value) {\r\n\t\t\t$list[$var] = $value;\r\n\t\t}\r\n\r\n\t\t// Remove any excluded values\r\n\t\tforeach ($list as $key => $value) {\r\n\t\t\tif (in_array($key, $exclude)) {\r\n\t\t\t\tunset($list[$key]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Put variables into query string form\r\n\t\tforeach ($list as $var => $value) {\r\n\t\t\t$query[] = $var.\"=\".urlencode($value);\r\n\t\t}\r\n\r\n\t\t$query = implode(\"&\",$query);\r\n\r\n\t\treturn($query);\r\n\t}\r\n\r\n/******************************************\r\n * Mail\r\n ******************************************/\r\n\r\n\t/**\r\n\t* Sends e-mail to a specified recipient.\r\n\t*\r\n\t* Sends e-mail to the specified recipient using the mail() server function. Validtes recipient e-mail address.\r\n\t* Creates the e-mail header based on passed valuse.\r\n\t* @param string $sendto The recipient's e-mail address\r\n\t* @param string $fromname Friendly name of the sender (appears in From: header)\r\n\t* @param string $fromMail Sender's e-mail address (appears in From: header)\r\n\t* @param string $subject Subject of the e-mail\r\n\t* @param string $message Main body of the e-mail message\r\n\t* @return null\r\n\t*/\r\n\tfunction mail_send($recipient,$fromname,$fromMail,$subject,$message) {\r\n\t\t$regex = \"/^[A-z0-9][\\w.-]*@[A-z0-9][\\w\\-\\.]+\\.[A-z0-9]{2,6}$/\";\r\n\t\tif (preg_match($regex, $recipient)) {\r\n\t\t\t$mailheaders  = \"From: $fromname <$fromMail>\\n\";\r\n\t\t\t$subject      = stripslashes($subject);\r\n\t\t\t$message      = stripslashes($message);\r\n\r\n\t\t\t$success = mail($recipient,$subject,$message,$mailheaders);\r\n/*\r\n\t\t\tif ($success) {\r\n\t\t\t\techo \"<!-- Mail sent to $recipient - \".date(\"r\").\"-->\\n\";\r\n\t\t\t}\r\n*/\t\t\t\r\n\t\t}\r\n\r\n\t\treturn($success);\r\n\t}\r\n\t\r\n\tfunction mail_isValidAddress($mail) {\r\n\t\t$regex = \"/^[A-z0-9][\\w.-]*@[A-z0-9][\\w\\-\\.]+\\.[A-z0-9]{2,6}$/\";\r\n\t\tif (preg_match($regex, $mail)) { return true; } else { return false; }\r\n\t}\r\n\r\n\r\n\r\n/******************************************\r\n * Strings and variables\r\n ******************************************/\r\n\r\n\t/**\r\n\t* Generates a random string of characters\r\n\t*\r\n\t* Generates a string of a specified length of random alphanumeric characters, or of a specified range of characters\r\n\t* @param string $charset Characters to consider for randomization, default is all alphanumerics\r\n\t* @param int $length Size of the string to return\r\n\t* @return string Random string of characters, will not include any special characters\r\n\t*/\r\n\tfunction str_randomchar($length=15, $charset=\"all\") {\r\n\t\tif ($charset==\"all\") {\r\n\t\t\t$charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n\t\t}\r\n\r\n\t\t$charsize = strlen($charset)-1;\r\n\r\n\t\t$randstring = \"\";\r\n\t\tfor ($a=0; $a < $length; $a++) {\r\n\t\t\t$randpos     = rand(0,$charsize);\r\n\t\t\t$randstring .= substr($charset,$randpos,1);\r\n\t\t}\r\n\r\n\t\treturn($randstring);\r\n\t}\r\n\r\n\t/**\r\n\t* Makes text display-safe\r\n\t*\r\n\t* Removes invalid HTML tags and extra whitespace/breaks\r\n\t* @param string $text Text to clean\r\n\t* @return string Cleaned text\r\n\t*/\r\n\tfunction str_clean($string) {\r\n\t\t$string = trim($string);\r\n\t\t$string = strip_tags($string,\"<p><i><em><b><strong><u><a>\"); // Remove all tags except shown\r\n\t\t$string = nl2br($string);\r\n\t\t//$string = stripslashes($string);\r\n\r\n\r\n\t\treturn($string);\r\n\t}\r\n\r\n\t// Turn patterns into regular HTML, including line breaks\r\n\tfunction str_tohtml($string) {\r\n\t\t$string = str_tolink($string);\r\n\t\t$string = str_tomail($string);\r\n\r\n\t\treturn($string);\r\n\t}\r\n\t\r\n\t// Add http:// to front of string if not present\r\n\tfunction str_toHttp($string) {\r\n\t\tif (!eregi(\"http\",$string)) {\r\n\t\t\t$string = \"http://\".$string;\r\n\t\t}\r\n\r\n\t\treturn($string);\r\n\t}\r\n\t\r\n\r\n\t// Converts full path URLs into hyperlinks\r\n\tfunction str_tolink($string) {\r\n\t\t$string = ereg_replace('http://[a-zA-z0-9\\.\\,\\~\\/\\_\\?\\&-\\=\\:]*', '<a href=\"\\\\0\">\\\\0</a>', $string);\r\n\t\t$string = ereg_replace('https://[a-zA-z0-9\\.\\,\\~\\/\\_\\?\\&-\\=\\:]*', '<a href=\"\\\\0\">\\\\0</a>', $string);\r\n\t\t$string = ereg_replace('file://[a-zA-z0-9\\.\\,\\~\\/\\_\\?\\&-\\=\\:]*', '<a href=\"\\\\0\">\\\\0</a>', $string);\r\n\t\t$string = ereg_replace('ftp://[a-zA-z0-9\\.\\,\\~\\/\\_\\?\\&-\\=\\:]*', '<a href=\"\\\\0\">\\\\0</a>', $string);\r\n\r\n\t\treturn($string);\r\n\t}\r\n\r\n\t// Converts e-mail addresses into mailto hyperlinks\r\n\tfunction str_tomail($string) {\r\n\t\t$string = ereg_replace('[_a-zA-z0-9\\-]+(\\.[_a-zA-z0-9\\-]+)*\\@' . '[_a-zA-z0-9\\-]+(\\.[a-zA-z]{1,3})+', '<a href=\"mailto:\\\\0\">\\\\0</a>', $string);\r\n\t\treturn($string);\r\n\t}\r\n\r\n\t// Escape special characters in XML element values\r\n\tfunction str_cleanxml($string) {\r\n\t\t$string = htmlspecialchars(htmlentities($string));\r\n\r\n\t\treturn($string);\r\n\t}\r\n\r\n\t// Returns the first 40 words of a string. Maximum of 55 words returned.\r\n\tfunction str_summary($text, $max=40, $morelink=FALSE) {\r\n\t\t$text  = ereg_replace(\"[\\r\\n]\",\" \",$text);\r\n\t\t$split = explode(\" \",$text);\r\n\r\n\t\t$count   = 0;\r\n\t\t$summary = array();\r\n\t\tforeach ($split as $word) {\r\n\t\t\tif ($word != \" \") {\r\n\t\t\t\t$word = trim($word);\r\n\t\t\t\t$size = strlen($word)-1;\r\n\r\n\t\t\t\t$lastchar  = substr($word,$size,1);\r\n\t\t\t\t$summary[] = $word;\r\n\r\n\t\t\t\tif (ereg(\"[\\.\\!\\?]\",$lastchar) and ($count >= $max)) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$count++;\r\n\r\n\t\t\t\tif ($count >= ($max+15)) { break; }\r\n\t\t\t} else {\r\n\t\t\t\t$summary[] = \"\\r\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ($count >= $max) {\r\n\t\t\tif ($morelink) {\r\n\t\t\t\t$summary[] = \"<em><a href=\\\"\".$morelink.\"\\\">...More</a></em>\";\r\n\t\t\t} else {\r\n\t\t\t\t$summary[] = \"<em>...More</em>\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t$text = implode(\" \",$summary);\r\n\r\n\t\treturn($text);\r\n\t}\r\n\r\n\t// Return variable name\r\n\tfunction varname(&$var, $scope=false, $prefix='unique', $suffix='value') {\r\n\t\tif ($scope) {\r\n\t\t\t$vals = $scope;\r\n\t\t} else {\r\n\t\t\t$vals = $GLOBALS;\r\n\t\t}\r\n\r\n   \t\t$old = $var;\r\n   \t\t$var = $new = $prefix.rand().$suffix;\r\n   \t\t$vname = FALSE;\r\n\r\n   \t\tforeach($vals as $key => $val) {\r\n     \t\tif($val === $new) {\r\n     \t\t\t$vname = \"$\".$key;\r\n     \t\t}\r\n     \t}\r\n\r\n\t\t$var = $old;\r\n\r\n   \t\treturn($vname);\r\n\t}\r\n\r\n\t// Get keywords from passed string\r\n\t// Optional file of stop words for comparing\r\n\tfunction str_keywords($phrase, $stopfile=FALSE) {\r\n\t\t$stopwords   = array();\r\n\t\t$keywords    = array();\r\n\t\t$keywordlist = explode(\" \",$phrase);\r\n\r\n\t\tif ($stopfile == TRUE) {\r\n\t\t\t$wordlist  = file_read($stopfile);\r\n\t\t\t$wordlist  = strtolower($wordlist);\r\n\t\t\t$stopwords = explode(\"\\r\\n\",$wordlist);\r\n\t\t}\r\n\r\n\t\tforeach ($keywordlist as $word) {\r\n\t\t\tif (!in_array(strtolower($word),$stopwords)) {\r\n\t\t\t\t$keywords[] = $word;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn($keywords);\r\n\t}\r\n\r\n\r\n\tfunction verbose($string) {\r\n\t\tglobal $verbose;\r\n\r\n\t\tif ($verbose == TRUE) {\r\n\t\t\techo \"<pre>$string</pre>\\n\";\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n/******************************************\r\n * Integers/Math\r\n ******************************************/\r\n\r\n\t// Returns proper ordinal suffix for any number\r\n\tfunction int_ordinal($number) {\r\n\t    if ($number % 100 > 10 && $number %100 < 14) {\r\n\t        $suffix = \"th\";\r\n\t    } else {\r\n\t        switch($number % 10) {\r\n\r\n\t            case 0:\r\n\t                $suffix = \"th\";\r\n\t                break;\r\n\r\n\t            case 1:\r\n\t                $suffix = \"st\";\r\n\t                break;\r\n\r\n\t            case 2:\r\n\t                $suffix = \"nd\";\r\n\t                break;\r\n\r\n\t            case 3:\r\n\t                $suffix = \"rd\";\r\n\t                break;\r\n\r\n\t            default:\r\n\t                $suffix = \"th\";\r\n\t                break;\r\n\t        }\r\n\t    }\r\n\r\n\t    return($number.$suffix);\r\n\t}\r\n\r\n/******************************************\r\n * HTML\r\n ******************************************/\r\n\r\n\t// Create regular HTML unordered list\r\n\tfunction html_list($array, $ulclass=\"\", $liclass=\"\") {\r\n\t\tif (is_array($array)) {\r\n\t\t\tif ($ulclass) {\r\n\t\t\t\t$firstchar = substr($ulclass,0,1);\r\n\r\n\t\t\t\tif ($firstchar == \"#\") {\r\n\t\t\t\t\t$ulclass = \" id=\\\"\".$ulclass.\"\\\"\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$ulclass = \" class=\\\"\".$ulclass.\"\\\"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($liclass) {\r\n\t\t\t\t$liclass = \" class=\\\"\".$liclass.\"\\\"\";\r\n\t\t\t}\r\n\r\n\t\t\techo \"<ul$ulclass>\\n\";\r\n\r\n\t\t\tforeach ($array as $label => $url) {\r\n\t\t\t\tif (!is_numeric($label)) {\r\n\t\t\t\t\t$free   = explode(\"|\",$url);\r\n\r\n\t\t\t\t\tif ($free[1]) {\r\n\t\t\t\t\t\t$target = \" target=\\\"\".$free[1].\"\\\"\";\r\n\t\t\t\t\t\t$url    = $free[0];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tunset($target);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\techo \"<li$liclass><a href=\\\"\".$url.\"\\\"$target>\".$label.\"</a></li>\\r\\n\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\techo \"<li$liclass>\".$url.\"</li>\\r\\n\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t?>\r\n\t\t\t\t</ul>\r\n\t\t<?\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Take array and output as dropdown menu\r\n\tfunction html_form_dropdown($array, $selected=\"null\", $name=\"null\", $reverse=FALSE) {\r\n\t\tif (is_array($array)) {\r\n\t\t\tforeach ($array as $label => $value) {\r\n\t\t\t\tif ($reverse == TRUE) {\r\n\t\t\t\t\t$save = $value;\r\n\t\t\t\t\t$value = $label;\r\n\t\t\t\t\t$label = $save;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (($value == $selected) and ($selected != \"null\")) {\r\n\t\t\t\t\t$thisone = \" selected\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tunset($thisone);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$list .= \"<option value=\\\"\".$value.\"\\\"$thisone>\".$label.\"</option>\\r\\n\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($name != \"null\" and $name != \"\") {\r\n\t\t\t\t?>\r\n\t\t\t\t<select name=\"<? echo $name; ?>\" id=\"<?= $name; ?>\"><? echo $list; ?></select>\r\n\t\t\t\t<?\r\n\t\t\t} else {\r\n\t\t\t\techo $list;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\t// Look for 'checked' values from array\r\n\t// !! Reference variable alters existing array !!\r\n\tfunction html_form_getchecked(&$array, $field, $match, $thisone=\"checked\") {\r\n\t\tif (is_array($array)) {\r\n\t\t\tif (array_key_exists($field, $array)) {\r\n\t\t\t\tif ($array[$field] == $match) {\r\n\t\t\t\t\t$array[$field] = $thisone;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn($array);\r\n\t}\r\n\r\n\t// Check alternate row coloring\r\n\tfunction html_rowcolor($color, $class=\"altrow\") {\r\n\t\tif ($color == $class) {\r\n\t\t\t$color = \"\";\r\n\t\t} else {\r\n\t\t\t$color = $class;\r\n\t\t}\r\n\r\n\t\treturn($color);\r\n\t}\r\n\r\n\t// Make all GET variables hidden form variables\r\n\tfunction html_form_hiddenfields() {\r\n\t\t$args = func_get_args();\r\n\r\n\t\tforeach ($_GET as $var => $value) {\r\n\t\t\tif (!in_array($var,$args)) {\r\n\t\t\t\techo \"<input type=\\\"hidden\\\" name=\\\"\".$var.\"\\\" value=\\\"\".$value.\"\\\">\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n/******************************************\r\n * FTP\r\n ******************************************/\r\n\tfunction ftp($host, $username, $password) {\r\n\t\t$connect = ftp_connect($host);\r\n\t\t$success = ftp_login($connect, $username, $password);\r\n\r\n\t\tif ($success) {\r\n\t\t\treturn($connect);\r\n\t\t} else {\r\n\t\t\techo \"<pre>FTP Attempt failed</pre>\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\r\n?>"]],"start1":0,"start2":0,"length1":0,"length2":26607}]],"length":26607}
{"contributors":[],"silentsave":false,"ts":1345041482668,"patch":[[{"diffs":[[0,"ers for "],[1,"groups of "],[0,"native P"]],"start1":114,"start2":114,"length1":16,"length2":26}]],"length":26617,"saved":false}
